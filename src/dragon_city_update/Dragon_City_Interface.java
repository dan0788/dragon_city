package dragon_city_update;

import abstracts.abs_mysqlFunctions;
import abstracts.abs_swingFunctions;
import abstracts.abs_validations;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class Dragon_City_Interface extends javax.swing.JFrame {

    private dragon objDragon = null;
    private abs_mysqlFunctions mysqlFunctions = null;
    private abs_swingFunctions swingFunctions = null;
    private abs_validations validations = null;
    private ResultSet rs = null;
    private ArrayList<String> array = null;
    private TreeSet<String> treeSet = null;
    private Map<String, String> map = null;
    private String txt = "";
    private String database = "dragon_city";
    private String selectedItem = null;//ComboBox_menuOpciones

    public Dragon_City_Interface() throws SQLException {
        initComponents();
        array = new ArrayList() {
        };
        mysqlFunctions = new abs_mysqlFunctions() {
        };
        swingFunctions = new abs_swingFunctions() {
        };
        rs = mysqlFunctions.elegir_bdd(database, "fortalezas", "elemento");
        while (rs.next()) {
            array.add(rs.getString(1));
        }
        swingFunctions.añadir_items_a_ComboBox(ComboBox_atibuto1, array);
        swingFunctions.añadir_items_a_ComboBox(ComboBox_atibuto2, array);
        swingFunctions.añadir_items_a_ComboBox(ComboBox_atibuto3, array);
        swingFunctions.añadir_items_a_ComboBox(ComboBox_atibuto4, array);
        Panel_ligaOpciones.setVisible(false);
        Panel_atributos.setVisible(false);
        ScrollPane_tabla.setVisible(false);
        ScrollPane_texto.setVisible(false);
        ComboBox_menuOpciones.addItem("Liga de dragones");
        ComboBox_menuOpciones.addItem("Buscar un dragón");
        ComboBox_menuOpciones.addItem("Buscar fortalezas y debilidades del dragón oponente");
        ComboBox_menuOpciones.addItem("Mostrar base de datos de dragones");
        ComboBox_menuOpciones.addItem("Salir");
        //////////////////
        validations = new abs_validations() {
        };

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        jLabel1 = new javax.swing.JLabel();
        Panel_menuOpciones = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        ComboBox_menuOpciones = new javax.swing.JComboBox<>();
        ScrollPane_texto = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Panel_atributos = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        TextField_nombreDragon = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ComboBox_atibuto1 = new javax.swing.JComboBox<>();
        ComboBox_atibuto2 = new javax.swing.JComboBox<>();
        ComboBox_atibuto3 = new javax.swing.JComboBox<>();
        ComboBox_atibuto4 = new javax.swing.JComboBox<>();
        Button_buscar = new javax.swing.JButton();
        Panel_ligaOpciones = new javax.swing.JPanel();
        Button_vaciarFila = new javax.swing.JButton();
        Button_vaciarTabla = new javax.swing.JButton();
        ScrollPane_tabla = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Dragon City Validación de elementos");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, -1, -1));

        jLabel2.setText("Opción");

        ComboBox_menuOpciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBox_menuOpcionesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_menuOpcionesLayout = new javax.swing.GroupLayout(Panel_menuOpciones);
        Panel_menuOpciones.setLayout(Panel_menuOpcionesLayout);
        Panel_menuOpcionesLayout.setHorizontalGroup(
            Panel_menuOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_menuOpcionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(ComboBox_menuOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        Panel_menuOpcionesLayout.setVerticalGroup(
            Panel_menuOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_menuOpcionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_menuOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ComboBox_menuOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(Panel_menuOpciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 500, 40));

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Microsoft JhengHei UI", 1, 10)); // NOI18N
        jTextArea1.setRows(5);
        ScrollPane_texto.setViewportView(jTextArea1);

        getContentPane().add(ScrollPane_texto, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 510, 130));

        jLabel3.setText("Nombre del oponente:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Atributo 1");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Atributo 2");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Atributo 3");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Atributo 4");

        ComboBox_atibuto1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        ComboBox_atibuto1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBox_atibuto1ActionPerformed(evt);
            }
        });

        ComboBox_atibuto2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));

        ComboBox_atibuto3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));

        ComboBox_atibuto4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));

        Button_buscar.setText("Buscar");
        Button_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_buscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_atributosLayout = new javax.swing.GroupLayout(Panel_atributos);
        Panel_atributos.setLayout(Panel_atributosLayout);
        Panel_atributosLayout.setHorizontalGroup(
            Panel_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_atributosLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(TextField_nombreDragon, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(Panel_atributosLayout.createSequentialGroup()
                .addGroup(Panel_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_atributosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(Panel_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Panel_atributosLayout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Panel_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Panel_atributosLayout.createSequentialGroup()
                                    .addComponent(ComboBox_atibuto1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(ComboBox_atibuto2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(ComboBox_atibuto3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(ComboBox_atibuto4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(Panel_atributosLayout.createSequentialGroup()
                        .addGap(209, 209, 209)
                        .addComponent(Button_buscar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Panel_atributosLayout.setVerticalGroup(
            Panel_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_atributosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextField_nombreDragon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBox_atibuto1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBox_atibuto2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBox_atibuto3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBox_atibuto4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Button_buscar)
                .addGap(29, 29, 29))
        );

        getContentPane().add(Panel_atributos, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, 500, 130));

        Button_vaciarFila.setText("Vaciar fila");
        Button_vaciarFila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_vaciarFilaActionPerformed(evt);
            }
        });

        Button_vaciarTabla.setText("Vaciar tabla");
        Button_vaciarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_vaciarTablaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_ligaOpcionesLayout = new javax.swing.GroupLayout(Panel_ligaOpciones);
        Panel_ligaOpciones.setLayout(Panel_ligaOpcionesLayout);
        Panel_ligaOpcionesLayout.setHorizontalGroup(
            Panel_ligaOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ligaOpcionesLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(Button_vaciarFila)
                .addGap(30, 30, 30)
                .addComponent(Button_vaciarTabla)
                .addGap(207, 207, 207))
        );
        Panel_ligaOpcionesLayout.setVerticalGroup(
            Panel_ligaOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ligaOpcionesLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(Panel_ligaOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Button_vaciarFila)
                    .addComponent(Button_vaciarTabla))
                .addGap(44, 44, 44))
        );

        getContentPane().add(Panel_ligaOpciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, 500, 90));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setCellSelectionEnabled(true);
        ScrollPane_tabla.setViewportView(jTable1);

        getContentPane().add(ScrollPane_tabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 510, 130));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ComboBox_atibuto1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBox_atibuto1ActionPerformed
//null
    }//GEN-LAST:event_ComboBox_atibuto1ActionPerformed

    private void Button_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_buscarActionPerformed
        jTextArea1.setText("");
        txt = "";
        String nombre = "";
        String atributo_1 = "";
        String atributo_2 = "";
        String atributo_3 = "";
        String atributo_4 = "";
        array = new ArrayList<>();
        map = new LinkedHashMap<>();
        mysqlFunctions = new abs_mysqlFunctions() {
        };
        swingFunctions = new abs_swingFunctions() {
        };
        try {
            switch (selectedItem) {
                case "Buscar un dragón":
                    nombre = TextField_nombreDragon.getText();
                    atributo_1 = ComboBox_atibuto1.getSelectedItem().toString();
                    atributo_2 = ComboBox_atibuto2.getSelectedItem().toString();
                    atributo_3 = ComboBox_atibuto3.getSelectedItem().toString();
                    atributo_4 = ComboBox_atibuto4.getSelectedItem().toString();
                    map.put("nombre", nombre);
                    map.put("atributo_1", atributo_1);
                    map.put("atributo_2", atributo_2);
                    map.put("atributo_3", atributo_3);
                    map.put("atributo_4", atributo_4);
                    if (map.get("atributo_1").equals("Seleccione...")) {
                        map.replace("atributo_1", "");
                    }
                    if (map.get("atributo_2").equals("Seleccione...")) {
                        map.replace("atributo_2", "");
                    }
                    if (map.get("atributo_3").equals("Seleccione...")) {
                        map.replace("atributo_3", "");
                    }
                    if (map.get("atributo_4").equals("Seleccione...")) {
                        map.replace("atributo_4", "");
                    }
                    this.mysqlFunctions.limpiar_tabla(this.database, "tabla_consulta");
                    this.mysqlFunctions.clausulaInsert_bdd("insert into " + this.database + ".tabla_consulta select * from " + this.database + ".lista_dragones where nombre like '%" + map.get("nombre") + "%' and atributo_1 like '%" + map.get("atributo_1") + "%' and atributo_2 like '%" + map.get("atributo_2") + "%' and atributo_3 like '%" + map.get("atributo_3") + "%' and atributo_4 like '%" + map.get("atributo_4") + "%'");
                    try {
                        swingFunctions.añadir_datos_a_Table(jTable1, "tabla_consulta", this.database, 15, 100, false);
                    } catch (SQLException ex) {
                        Logger.getLogger(Dragon_City_Interface.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    /////////////////
                    break;
                case "Buscar fortalezas y debilidades del dragón oponente":
                    nombre = TextField_nombreDragon.getText();
                    if (this.validations.textoVacio(nombre)) {
                        jOptionPane1.showMessageDialog(null, "El dragón debe tener un nombre", "Error", JOptionPane.ERROR_MESSAGE);
                        throw new Exception("El dragón debe tener un nombre");
                    }
                    nombre = validations.letraCapitalCadaPalabra(nombre);
                    atributo_1 = validations.letraCapitalFrase(ComboBox_atibuto1.getSelectedItem().toString());
                    if (atributo_1.equals("Seleccione...")) {//corregir error de primer elemento nulo
                        jOptionPane1.showMessageDialog(null, "El primer atributo no puede ser nulo", "Error", JOptionPane.ERROR_MESSAGE);
                        throw new Exception("El primer atributo no puede ser nulo");
                    }
                    atributo_2 = validations.letraCapitalFrase(ComboBox_atibuto2.getSelectedItem().toString());
                    atributo_3 = validations.letraCapitalFrase(ComboBox_atibuto3.getSelectedItem().toString());
                    atributo_4 = validations.letraCapitalFrase(ComboBox_atibuto4.getSelectedItem().toString());
                    atributo_1 = atributo_1.equals("Seleccione...") ? "-" : atributo_1;
                    atributo_2 = atributo_2.equals("Seleccione...") ? "-" : atributo_2;
                    atributo_3 = atributo_3.equals("Seleccione...") ? "-" : atributo_3;
                    atributo_4 = atributo_4.equals("Seleccione...") ? "-" : atributo_4;
                    array.add(atributo_1);
                    array.add(atributo_2);
                    array.add(atributo_3);
                    array.add(atributo_4);
                    int i = 0;
                    while (i < array.size()) {
                        if (array.get(i).equals("-")) {
                            array.remove(i);
                        } else {
                            txt += array.get(i) + ", ";
                            i++;
                        }
                    }
                    txt = this.validations.eliminarUltimosCaracteres(txt, ",");
                    int confirm = jOptionPane1.showConfirmDialog(null, "El dragón a ingresar es:" + nombre + "\nCon atributos: " + txt + "\n¿Es correcto?", "Confirmar datos", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null);
                    if (confirm != JOptionPane.YES_OPTION) {
                        throw new Exception();
                    }
                    array.clear();
                    objDragon = new dragon();
                    objDragon.setNombre(nombre);
                    objDragon.setAtributo_1(atributo_1);
                    objDragon.setAtributo_2(atributo_2);
                    objDragon.setAtributo_3(atributo_3);
                    objDragon.setAtributo_4(atributo_4);
                    jTextArea1.append("Dragón oponente: " + nombre + "\n");
                    //fortalezas
                    rs = mysqlFunctions.clausulaSelect_bdd("select contra_1,contra_2 from dragon_city.fortalezas where elemento='" + atributo_1 + "' or elemento='" + atributo_2 + "' or elemento='" + atributo_3 + "' or elemento='" + atributo_4 + "'");
                    while (rs.next()) {
                        array.add(rs.getString("contra_1"));
                        array.add(rs.getString("contra_2"));
                    }
                    treeSet = new TreeSet<>(array);
                    jTextArea1.append("Fortalezas\n");
                    jTextArea1.append("El primer elemento de mi dragón no debe ser uno de los siguientes: ");
                    treeSet.remove("-");
                    txt = "";
                    for (String string : treeSet) {
                        txt += string + ",";
                    }
                    txt = this.validations.eliminarUltimosCaracteres(txt, ",");
                    jTextArea1.append(txt + "\n");
                    TreeSet<String> treeSetFort = new TreeSet<>(treeSet);
                    array.clear();
                    treeSet.clear();
                    //debilidades
                    rs = mysqlFunctions.clausulaSelect_bdd("select contra_1,contra_2 from dragon_city.debilidades where elemento='" + atributo_1 + "'");
                    while (rs.next()) {
                        array.add(rs.getString("contra_1"));
                        array.add(rs.getString("contra_2"));
                    }
                    treeSet = new TreeSet<>(array);
                    jTextArea1.append("Debilidades\n");
                    treeSet.remove("-");
                    txt = "";
                    for (String string : treeSet) {
                        txt += string + ",";
                    }
                    txt = this.validations.eliminarUltimosCaracteres(txt, ",");
                    TreeSet<String> treeSetDeb = new TreeSet<>(treeSet);
                    array.clear();
                    treeSet.clear();
                    jTextArea1.append(txt + "\n");
                    for (Object obj : treeSetDeb) {
                        if (!treeSetFort.contains(obj.toString())) {
                            treeSet.add(obj.toString());
                        }
                    }
                    if (!treeSet.isEmpty()) {
                        jTextArea1.append("El primer elemento de mi dragón puede ser: ");
                        txt = "";
                        for (String string : treeSet) {
                            txt += string + ",";
                        }
                        txt = this.validations.eliminarUltimosCaracteres(txt, ",");
                        jTextArea1.append(txt);
                    }
                    //contar las veces q el dragon se repite en la bdd
                    this.rs = this.mysqlFunctions.clausulaSelect_bdd("select count(nombre) from " + this.database + ".lista_dragones where nombre='" + objDragon.getNombre() + "'");
                    while (this.rs.next()) {
                        int count = this.rs.getInt(1);
                        //verifica si está repetido según el conteo de la bdd
                        if (count >= 1) {
                            count = jOptionPane1.showConfirmDialog(null, "Este dragón ya existe\n¿Deseas reemplazarlo por el que acabas de ingresar?", "Confirmar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                            if (count == JOptionPane.YES_OPTION) {
                                //reemplaza los datos del nuevo dragon por el de la bdd
                                this.mysqlFunctions.clausulaInsert_bdd("update " + this.database + ".lista_dragones set nombre='" + objDragon.getNombre() + "',elemento_1='" + objDragon.getAtributo_1() + "',elemento_2='" + objDragon.getAtributo_2() + "',elemento_3='" + objDragon.getAtributo_3() + "',elemento_4='" + objDragon.getAtributo_4() + "' where nombre='" + objDragon.getNombre() + "'");
                                jOptionPane1.showMessageDialog(null, "Datos reemplazados", "Información", JOptionPane.INFORMATION_MESSAGE);
                                break;
                            }
                        } else {
                            //insertar el dragón buscado a la bdd
                            this.mysqlFunctions.clausulaInsert_bdd("insert ignore into " + this.database + ".lista_dragones (nombre,elemento_1,elemento_2,elemento_3,elemento_4) values('" + objDragon.getNombre() + "','" + objDragon.getAtributo_1() + "','" + objDragon.getAtributo_2() + "','" + objDragon.getAtributo_3() + "','" + objDragon.getAtributo_4() + "')");
                        }
                    }
                    break;
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        } catch (Exception ex1) {
            System.out.println("Datos no válidos");
            Logger.getLogger(Dragon_City_Interface.class.getName()).log(Level.SEVERE, null, ex1);
        }
    }//GEN-LAST:event_Button_buscarActionPerformed

    private void ComboBox_menuOpcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBox_menuOpcionesActionPerformed
        selectedItem = ComboBox_menuOpciones.getSelectedItem().toString();
        if (selectedItem.equals("Liga de dragones")) {
            Panel_ligaOpciones.setVisible(true);
            Panel_atributos.setVisible(false);
            ScrollPane_tabla.setVisible(true);
            ScrollPane_texto.setVisible(false);
            txt = "liga";

        } else if (selectedItem.equals("Mostrar base de datos de dragones")) {
            Panel_ligaOpciones.setVisible(false);
            Panel_atributos.setVisible(false);
            ScrollPane_tabla.setVisible(true);
            ScrollPane_texto.setVisible(false);
            txt = "lista_dragones";
        } else if (selectedItem.equals("Buscar un dragón")) {
            jLabel3.setText("Nombre del dragón:");
            ScrollPane_tabla.setVisible(true);
            ScrollPane_texto.setVisible(false);
            Panel_ligaOpciones.setVisible(false);
            Panel_atributos.setVisible(true);
            txt = "lista_dragones";
        } else {
            Panel_ligaOpciones.setVisible(false);
            Panel_atributos.setVisible(true);
            ScrollPane_tabla.setVisible(false);
            ScrollPane_texto.setVisible(true);
        }
        swingFunctions = new abs_swingFunctions() {
        };
        try {
            swingFunctions.añadir_datos_a_Table(jTable1, txt, database, 15, 100, false);
            this.mysqlFunctions = new abs_mysqlFunctions() {
            };
        } catch (SQLException ex) {
            Logger.getLogger(Dragon_City_Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ComboBox_menuOpcionesActionPerformed

    private void Button_vaciarFilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_vaciarFilaActionPerformed
        selectedItem = ComboBox_menuOpciones.getSelectedItem().toString();
        if (selectedItem.equals("Liga de dragones")) {
            txt = "liga";
        } else if (selectedItem.equals("Mostrar base de datos de dragones")) {
            txt = "lista_dragones";
        }
        this.mysqlFunctions = new abs_mysqlFunctions() {
        };
        int id = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
        this.mysqlFunctions.limpiar_fila(database, txt, "id", Integer.toString(id));
        swingFunctions = new abs_swingFunctions() {
        };
        try {
            swingFunctions.añadir_datos_a_Table(jTable1, txt, database, 15, 100, false);
        } catch (SQLException ex) {
            Logger.getLogger(Dragon_City_Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Button_vaciarFilaActionPerformed

    private void Button_vaciarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_vaciarTablaActionPerformed
        selectedItem = ComboBox_menuOpciones.getSelectedItem().toString();
        if (selectedItem.equals("Liga de dragones")) {
            txt = "liga";
        } else if (selectedItem.equals("Mostrar base de datos de dragones")) {
            txt = "lista_dragones";
        }
        this.mysqlFunctions = new abs_mysqlFunctions() {
        };
        this.mysqlFunctions.limpiar_tabla(database, txt);
        int confirm = jOptionPane1.showConfirmDialog(null, "¿Estás seguro de eliminar esta tabla?", "Confirmar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null);
        if (confirm == JOptionPane.YES_OPTION) {
            swingFunctions = new abs_swingFunctions() {
            };
            try {
                swingFunctions.añadir_datos_a_Table(jTable1, txt, database, 15, 100, false);
            } catch (SQLException ex) {
                Logger.getLogger(Dragon_City_Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
            jOptionPane1.showMessageDialog(null, "Registros eliminados", "", JOptionPane.PLAIN_MESSAGE);
        } else if (confirm == JOptionPane.NO_OPTION) {
            jOptionPane1.showMessageDialog(null, "Solicitud cancelada", "", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_Button_vaciarTablaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dragon_City_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dragon_City_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dragon_City_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dragon_City_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Dragon_City_Interface().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Dragon_City_Interface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_buscar;
    private javax.swing.JButton Button_vaciarFila;
    private javax.swing.JButton Button_vaciarTabla;
    private javax.swing.JComboBox<String> ComboBox_atibuto1;
    private javax.swing.JComboBox<String> ComboBox_atibuto2;
    private javax.swing.JComboBox<String> ComboBox_atibuto3;
    private javax.swing.JComboBox<String> ComboBox_atibuto4;
    private javax.swing.JComboBox<String> ComboBox_menuOpciones;
    private javax.swing.JPanel Panel_atributos;
    private javax.swing.JPanel Panel_ligaOpciones;
    private javax.swing.JPanel Panel_menuOpciones;
    private javax.swing.JScrollPane ScrollPane_tabla;
    private javax.swing.JScrollPane ScrollPane_texto;
    private javax.swing.JTextField TextField_nombreDragon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
